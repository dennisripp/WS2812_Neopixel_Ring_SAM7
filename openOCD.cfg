#Alternativ Startb
#openocde -f interface/ftdi/olimex-arm-usb-ocd.cfg -f target/at91sam7x256.cfg

#########################################################
#   Interface Configuration 
#########################################################
source [find interface/ftdi/olimex-arm-usb-ocd.cfg]

#########################################################
#    Board Configuration
#########################################################
#Board Configuration für NXT
#Olimex JTAG-Pin   <-> NXT
# 1 VREF            <- VCC3V
# 2 VREF            <- VCC3V
# 3 TTRST_N         <- Pull Up 10k 
# 5 TTDI            -> TDI
# 7 TTMS            -> TMS
# 9 TTCK            -> TCK
#11 TRTCK           
#13 TTDO            -> TDO
#15 TSRST_N         -> NRST = Chip Reset
#17 NC              -> NC
#19 Target Supply   -> NC
#--> srst_only 
#--> Prozessorintern ist ein POR Controller vorhanden, welcher jtag_nreset erzeugt, 
#    folglich kein Durchgriff von srst zu trst

#Keine 'saubere' JTAG Verdrahtung
# - Maximum beim Olimex-debugger 1200kHz
# - Jedoch bei dieser Datenrate Fehler bei DCC-Kommunikation
adapter_khz 1000

#Zeit in ms
adapter_nsrst_delay 200

#Possible JTAG-Resets
# SRST (SystemReset): Hardware Signal which resets all chips connected to the 
#      JTAG Adapter, such as Processor, power management chips,and I/O Controllers. 
#      Normally reests triggered with this signals behave exactly like pressing a reset button
# TRST (JTAG TAP Reset): Resets just the TAP controlelr connected to the JTAG adapter. 
#      Such reset should not be visible to reset of the systeme
#Emulation Reset: Many devices can be reset throught JTAG Commands. These resets are 
#      often distinguishable from system reset
#Other Resets .. system-on-chip devices ofent supports serval other types of resets
#Best Case: OpenOCD, can hold SRST, then reset the TAP via TRST and send commands 
#      through JTAG to hat the CPU to halt the CPU at the reset vector befor the 
#      1st instruction is executed. Then when it finally releases the SRST signal, 
#      the system is halted under debugger control befor any code has executed.

reset_config srst_only

#use combined on interfaces or targets that can't set TRST/SRST separately
#reset_config srst_only srst_pulls_trst

#########################################################
#    CPU Configuration
#########################################################
# Aus file at91sam7x256.cfg entnommen
# da ergänzend NXT-Board spezfische Initialisierung erfolgt

if { [info exists CHIPNAME] } {
   set _CHIPNAME $CHIPNAME
} else {
   set _CHIPNAME sam7x256
  #set _CHIPNAME sam7s256
}

if { [info exists ENDIAN] } {
   set _ENDIAN $ENDIAN
} else {
   set _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x3f0f0f0f
}

#Der Prozessor hat zwei parallel JTAG-Chain vorhanden, welche mit JTAGSEL ausgewählt 
#  werden. Leitung ist auf NXT-Board per PullDown auf Masse gezogen, so das 
#  der ICE/JTAG TAP verbunden ist. Kein weitere Baustein in JTAG-Chain
#Die JTAG-Chain des AVR-Prozessor ist auf separaten Stecker gelegt
#-> Standardkonfiguration aus at91sam7x256.cfg File ist OK
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id  $_CPUTAPID

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME

#following target events are available
#-debug-halted:  The target has halted für debug reason (i.E. breakpoint)
#-debug-resumed: The target has resumed (i.e gdb said run)
#-early-halted:  Occurs early in the halt process
#-examine-start: Befeore taret examine is called
#-examine-end:   After target examine is called with no errors
#-gdb-attach:    When GDB connects. This is befor any communication with the target
#-gdb-detach:    When GDB disconnects
#-gdb-end:       When the targets has halted and GDB is not doing anything
#-gdb-falsh-erase-start/end: Before/After the GDB flash process tries to erase the flash 
#-gdb-flash-write-start/end:
#-gdb-start:     Befor the target steps, gdb is trying to start/resume the target
#-halted:        The target has halted
#reset-assert-pre/post
#-reset-assert
#reset-deassert-pre/post
#-reset-end
#-reset-init:    Used by reset init command for board specific initialization. 
#                this event fires after reset-deassert-post
#-reset-start:   Issued as part of reset processing before reset_init is called: 
#                This is the most robust place to use jtag_rclk or adaper_khz 
#                to switch to a low JTAG clock rate, when reset disable PLLS
#-resume-start/end
#-resumed:       Target has resumed
#-trace-config:  After target hardware trace configuration was changed

$_TARGETNAME configure -event reset-init {
	#Prozessor initialisieren
	
	# disable watchdog
	mww 0xfffffd44 0x00008000
	
	# enable user reset
	# AT91C_BASE_RSTC->RSTC_RMR = 0xA5000001;
    # *(0xFFFFFD08)=0xA5000001
	mww 0xfffffd08 0xa5000001
	
	# CKGR_MOR : enable the main oscillator
	#pPMC->PMC_MOR = ((6 << 8) & AT91C_CKGR_OSCOUNT) | AT91C_CKGR_MOSCEN;
	#*(0xFFFFFC20)=0x00000601
	mww 0xfffffc20 0x00000601
	sleep 10
	
	# CKGR_PLLR: 96.1097 MHz
	#pPMC->PMC_PLLR = ((AT91C_CKGR_DIV & 0x05) | (AT91C_CKGR_PLLCOUNT & (28 << 8))
    #                                          | (AT91C_CKGR_MUL & (25 << 16)));
    #  ((18,432MHzQuarz / 5) *(25+1)) = 95,8464   MUL=25  DIV=5
    #  ((18,432MHzQuarz /14) *(72+1)) = 96,1097   MUL=72  DIV=14
    #*(0xFFFFFc2C)=0x00191c05  
	mww 0xfffffc2c 0x00481c0e
	sleep 10
	
	# PMC_MCKR : MCK = PLL / 2 ~= 48 MHz
    #pPMC->PMC_MCKR =  AT91C_PMC_PRES_CLK_2 | AT91C_PMC_CSS_PLL_CLK;
	#*(0xFFFFFc30)=0x00000007
	mww 0xfffffc30 0x00000007
	sleep 10
	
	# MC_FMR: flash mode (FWS=1,FMCN=60) =2Cycle Read/3Cycle Write
	#AT91C_BASE_MC->MC_FMR = ((AT91C_MC_FMCN) & ((MCK + 500000)/1000000 << 16))
    #                         | AT91C_MC_FWS_1FWS;
    # *(0xFFFFFF00+60)=0x003010000  -> FMCN 0x30 vs 0x3c µs
	mww 0xffffff60 0x003c0100
	sleep 100
	
	#DCC-Abfrage per Polling einschalten
	poll on
	
	#Enable TracePoint & Termina-Messages
	target_request debugmsgs enable
	
	trace history clear
	trace history 1024
	trace point clear
}

#Working-Area setzen (welche vom Linker ausgeschlossen sein muss)
$_TARGETNAME configure -work-area-phys 0x0020F000 -work-area-size 0x1000 -work-area-backup 0

#Flash Konfiguration
#flash bank <driver> <base_addr> <size> <chip_width> <bus_width> <target_number> [<target_name> <banks> <sectors_per_bank> <pages_per_sector> <page_size> <num_nvmbits> <ext_freq_khz>]
set _FLASHNAME $_CHIPNAME.flash
flash bank $_FLASHNAME at91sam7 0 0 0 0 $_TARGETNAME 0 0 0 0 0 0 0 18432

#The at91sam7 Driver automatically recognizes a number of these chips using the chip 
#   identifcation register and autoconfigure itself (so 0 0 0 0 ist perfekt)
#the flash controller handles erases automatically on a page (128/256 byte) basis, 
#   so explicit erase commands are not necessary for flahs programming. 
#   However there is an "EraseAll" command that can erase an entire flash plane 
#   (of up to 256kB) and it will be used automatically when you issue 
#   flash erase_sector or flash erase_adress commands
#at91sam7 gpnvm bitnum (set/clear) Set or clear a General Purpose Non-Volatile-Memory 
#   (GPNVM) bit for the processor. 

#AT91SAM7 Register und Funktionen
#Register AIC_SMR/AIC_SVR/AIC_IVR...
#Fkt      show_AIC()/show_AIC_IPR_helper()/show_AIC_IMR_helper()
#Register RTTC_RTMR/RTTC_RTAR/...
#Fkt      show_RTTC()/show_RTTC_RTMR_helper()/show_RTTC_RTSR_helper()
#Fkt      show_DBGU()/show_mmr_USx_MR_helper()
#Fkt      show_mmr32_reg()/show_mmr32_bits()/show_mmr_bitfield()
#Fkt      memread32()/memwrite32()/...
#Fkt      normalize_bitfield()/show_normalize_bitfield()
source [find chip/atmel/at91/at91sam7x256.tcl]

proc do_flash { } {
	reset init
	flash write_image erase unlock bin/demo.elf  
	verify_image bin/demo.elf 0
	reset init
	echo ">>resume to Run Appliation"
	echo ">>shutdown to stop telnet and openOCD"
}

proc do_load { } {
	reset init
	load_image bin/demo.elf
	reg pc 
	echo ">resume to Run Apllication"
	echo ">halt to Stop Application"
	echo ">step for Single Step"
	echo ">reg  or arm reg for Register"
	echo ">mdd/w/h/b  mwd/w/h/b  für Memory Access"
	echo ">bp / rbp for Breakpoints"
}

#########################################################
#    Wichtige OpenOCD-Befehle
#########################################################
#Wahlweise 
#  über Telnet-Verbindung
#  über gdb mit vorangestelten 'monitor'

echo  "---- Interessante/Wichtige Befehle ----"
echo  "  >>   telnet localhost 4444"
echo  "  GDB: Target remote localhost:3333"
echo  "  help \[string\]"
echo  "  shutdown  //close the OpenOCD Server"
echo  "  halt \[ms\]        //Prozessor anhalten"
echo  "  resume \[adr\] //Prozessor weiterlaufen lassen"
echo  "  step \[adr\]   //Sing-Step "
echo  "  reset \[run|halt\] //Performs a Hard-Reset via SRST"
echo  "  reset init         //Reset+reset-init()"
echo  "  load_image file adr \[\[bin|ihex|elf|s19\] min max\]"
echo  "  test_image file adr \[\[bin|ihex|elf|s19\] min max\]"
echo  "  reg \[(number|name)\[(value|'force')\]\]"
echo  "  arm reg     //All Registers"
echo  "  mdd/w/h/b addr \[count\] //Memory Read (64/32/16/8)"
echo  "  mwd/w/h/b addr value \[count\] //Memory Write"
echo  "  bp \[adr len \[hw\]\]  //Breakpoint List/Set"
echo  "  rbp adr                //Remove Breakpoint"
echo  "  arm7_9 dbgrq \['enable'|'disable'\]"
echo  "  wp \[adr len \[(r|w|a) \[value \[mask\]\]\] //Watchpoint"
echo  "  rwp adr                //Remove Watchpoint"
echo  "---- ARM-Specific ---"
echo  "  arm core_state         //Display/change Arm state"
echo  "  arm disassemble address \[count\['thumb'\]\]"
echo  "---- DCC-Communication ---"
echo  "  target_request debugmsgs \[enable|disable|charmsg]"
echo  "  trace point \[clear|identifier\] "
echo  "  arm7_9 dcc_downloads \['enable'|'disable'\]"
echo  "  poll on   //Activating DCC-Communication"
echo  "---- Flash-Commands ------"
echo  "  flash info num \[sector\]"
echo  "  flash write_image \[erase\]\[unlock\]file \[off\] \[type\]"
echo  "  flash erase_sector num first last"
echo  "  flash fillw/h/b adr valu length"
echo  "  flash wirte_bank num filen \[offset\] //Write binary file"
echo  "  flash read_bank  num filen \[offset\] //Read  binary file"
echo  "  flash verify_bank num file \[offset\]"
echo  "---- TCL-Commands ------"
echo  "  do_load   //reset+load+Startadresse"
echo  "  do_flash  //Flash Programmieren"
echo  "  show_AIC()/show_RTTC()/show_DBGU()"
echo  "  show_mmr32_reg()/show_mmr32_bits()"
echo  "  memread32()/memwrite32()/..."


